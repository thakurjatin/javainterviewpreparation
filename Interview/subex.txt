// Int arr = {4,3,2,1,9,10,17,19,21,18,20,22};
find largest largest subsequene and length
*output: {17,19,21,18,20,22}


public int largestSubsequence(int[] arr){
	int arr2[] = new int(num.length)
	
	for(int i=1;i<arr.length; i++){

	 for(int j=0; j< i;j++){
		if(arr[i] - arr[j] == 2){
			arr2[i] = arr[j]; 
}
		
}

}
return arr2.length;

}

// reverse linkedlist { 1|3  3|3  4|3  }

publice Node reverse(Node headnode){

if(headNode == null || headnode.next == null)
	return headnode;

Node firstNode = reverse(headNode.next);	
Node tempNode = firstNode;
while(tempNode.next != null){

	tempNode = tempNode.next;

}

tempNode.next = headNode;
headNode.next = null;
return firstNode;

}
// thread safe singleton class

class Singleton{

private Singleton instance;
private Singleton(){}
public static Syncronized Singleton getInstance(){

	if(instance == null){
	return instance = new Singleton();
}

return instance;
}

}
















